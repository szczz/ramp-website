"use strict";(self["webpackChunkramp_website"]=self["webpackChunkramp_website"]||[]).push([[6903],{78531:function(e,s,t){t.d(s,{i:function(){return a},n:function(){return r}});var n=t(98503),o=t(75457);function r(e,s,t=i){return new n.bv({x:e[t.originX],y:e[t.originY],z:e[t.originZ],spatialReference:s})}function a(e,s=i){return new o.N({translation:[e[s.translationX],-e[s.translationZ],e[s.translationY]],rotationAxis:[e[s.rotationX],-e[s.rotationZ],e[s.rotationY]],rotationAngle:e[s.rotationDeg],scale:[e[s.scaleX],e[s.scaleZ],e[s.scaleY]]})}const i={originX:"originX",originY:"originY",originZ:"originZ",translationX:"translationX",translationY:"translationY",translationZ:"translationZ",scaleX:"scaleX",scaleY:"scaleY",scaleZ:"scaleZ",rotationX:"rotationX",rotationY:"rotationY",rotationZ:"rotationZ",rotationDeg:"rotationDeg"}},65738:function(e,s,t){t.d(s,{a:function(){return d},b:function(){return c},c:function(){return m},d:function(){return f},i:function(){return h},l:function(){return g},m:function(){return w},n:function(){return u},p:function(){return p},r:function(){return i},t:function(){return y},u:function(){return l}});var n=t(98503),o=t(75457);const r="upload-assets",a=()=>new Error;class i extends n.s{constructor(){super(`${r}:unsupported`,"Layer does not support asset uploads.",a())}}let c=class extends n.s{constructor(){super(`${r}:no-glb-support`,"Layer does not support glb.",a())}};class u extends n.s{constructor(){super(`${r}:no-supported-source`,"No supported external source found",a())}}class l extends n.s{constructor(){super(`${r}:not-base-64`,"Expected gltf data in base64 format after conversion.",a())}}class p extends n.s{constructor(){super(`${r}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",a())}}class d extends n.s{constructor(e,s){super(`${r}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,a())}}class f extends n.s{constructor(e,s){super(`${r}-layer:upload-failed`,`Failed to upload mesh file ${e}. Error code: ${s?.code??"-1"}. Error message: ${s?.messages??"unknown"}`,a())}}class m extends n.s{constructor(e){super(`${r}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,a())}}class g extends n.s{constructor(){super(`${r}:convert3D-failed`,"convert3D failed.")}}class h extends n.s{constructor(){super("invalid-input:no-model","No supported model found")}}class w extends n.s{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}}function y(e){const s=1/(0,n.bq)(e,1);return 1!==s?new o.N({scale:[s,s,s]}):void 0}},16903:function(e,s,t){t.d(s,{uploadAssets:function(){return U}});var n=t(98503),o=t(77998),r=t(66222),a=t(65738),i=t(5948),c=t(48165),u=t(78531);const l={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function p(e,s=e=>{},t){return new d(e,s,t)}let d=class{constructor(e,s=e=>{},t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let s=0;s<e;s++){const t=s,n=1/e;this._weights[t]=n,this._progressMap.set(t,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(1===e&&(0,n.a$)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[s,t]of this._timingsMap){const n=Math.round(t.end-t.start)/1e3,o=Math.round(n/e*100);console.log(this.taskName??"Task",{stepKey:s,stepTime:n,relativeTime:o})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),(0,n.a$)("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=(0,n.ao)(this._timingsMap,e,(()=>({start:t,end:0})));1===s&&(o.end=t)}this.emitProgress()}simulate(e,s){return f((s=>this.setProgress(e,s)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function f(e=e=>{},s=P){const t=performance.now();e(0);const o=setInterval((()=>{const n=performance.now()-t,o=1-Math.exp(-n/s);e(o)}),b);return(0,n.aH)((()=>{clearInterval(o),e(1)}))}function m(e,s=h){return(0,n.gI)((0,n.gJ)(e*y/s))}function g(e,s=w){return(0,n.gI)((0,n.gJ)(e*y/s))}const h=10,w=10,y=8e-6,b=(0,n.cP)(50),P=(0,n.cP)(1e3),T=1e6,v=20*T,D=2e9,A=3;async function x({data:e,name:s,description:t},o,r){let a=null;try{const c=(0,n.Z)(o,"uploads"),u=(0,n.Z)(c,"info"),{data:l}=await(0,n.U)(u,{query:{f:"json"},responseType:"json"});(0,n.D)(r);const d=(0,i.g)(o),f=l.maxUploadFileSize*T,g=d?D:f,h=d?Math.min(v,f):v;if(e.size>g)throw new Error("Data too large");const w=(0,n.Z)(c,"register"),{data:y}=await(0,n.U)(w,{query:{f:"json",itemName:$(s),description:t},responseType:"json",method:"post"});if((0,n.D)(r),!y.success)throw new Error("Registration failed");const{itemID:b}=y.item;a=(0,n.Z)(c,b);const P=(0,n.Z)(a,"uploadPart"),x=Math.ceil(e.size/h),U=new Array;for(let s=0;s<x;++s)U.push(e.slice(s*h,Math.min((s+1)*h,e.size)));const N=U.slice().reverse(),F=new Array,M=p(x,r?.onProgress,"uploadItem"),Z=async()=>{for(;0!==N.length;){const e=U.length-N.length,s=N.pop(),t=new FormData,o=M.simulate(e,m(s.size));try{t.append("f","json"),t.append("file",s),t.append("partId",`${e}`);const{data:o}=await(0,n.U)(P,{timeout:0,body:t,responseType:"json",method:"post"});if((0,n.D)(r),!o.success)throw new Error("Part upload failed")}finally{o.remove()}}};for(let e=0;e<A&&0!==N.length;++e)F.push(Z());await Promise.all(F);const k=(0,n.Z)(a,"commit"),{data:E}=await(0,n.U)(k,{query:{f:"json",parts:U.map(((e,s)=>s)).join(",")},responseType:"json",method:"post"});if((0,n.D)(r),!E.success)throw new Error("Commit failed");return E.item}catch(c){if(null!=a){const e=(0,n.Z)(a,"delete");await(0,n.U)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw c}}function $(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function U(e,s,t){const n=e.length;if(!n)return t?.onProgress?.(1),[];const o=p(n,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,n)=>N(e,s,{...t,onProgress:o.makeOnProgress(n)}))))}async function N(e,{layer:s,ongoingUploads:t},n){const o=t.get(e);if(o)return o;if(!G(s))throw new a.r;if(F(e,s))return n?.onProgress?.(1),e;const r=M(e,s,n);t.set(e,r);try{await r}finally{t.delete(e)}return e}function F(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,r.m)(e,t)))}async function M(e,s,t){const{metadata:o}=e,{displaySource:r}=o,a=S(r?.source,s,{checkForConversionRequired:(0,n.a$)("enable-feature:georeferenced-uploads")}),i=null!=a?Z(a,s,t):o.externalSources.length>0?k(e,s,t):E(e,s,t),c=await i;return(0,n.D)(t),e.addExternalSources([c]),e}async function Z(e,s,t){return{source:await R(e,s,t),original:!0,unitConversionDisabled:!0}}async function k(e,s,t){const n=K(s),{externalSources:o}=e.metadata,r=I(o,s);if(!r)throw new a.n;const i=p(l.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),c=await R(r,s,{onProgress:i.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:c,original:!0}]);const u=r.reduce(((e,{asset:s})=>s instanceof File?e+s.size:e),0),d=i.simulate("serviceAssetsToGlb",g(u));try{const{source:o,transform:r,origin:a}=await L(c,s,n);return e.transform=r,a&&(e.metadata.georeferenced=!0,t?.useAssetOrigin&&(e.vertexSpace.origin=[a.x,a.y,a.z??0],e.spatialReference=a.spatialReference)),{source:o,unitConversionDisabled:!0}}finally{d.remove()}}async function E(e,s,t){const n=p(l.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),o=j(e,s,{...t,onProgress:n.makeOnProgress("meshToAssetBlob")});return{source:await C([o],s,{...t,onProgress:n.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function j(e,s,t){const r=K(s),a=await e.load(t),i=await a.toBinaryGLTF({origin:a.origin,signal:t?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return(0,n.D)(t),{blob:new Blob([i],{type:"model/gltf-binary"}),assetName:`${(0,o.r)()}.glb`,assetType:r}}function I(e,s){for(const t of e){const e=S(t.source,s);if(e)return e}return null}function S(e,{infoFor3D:s},t={}){if(!e)return null;const{supportedFormats:n,editFormats:o}=s,a=(0,r.N)(e),i=new Array,u=(0,c.m)(s),l=(0,c.l)(s);let p=!1;for(const r of a){const e=_(r,n);if(!e)return null;const{assetType:s}=e;if(t.checkForConversionRequired&&(s===u||s===l))return null;o.includes(s)&&(p=!0),i.push(e)}return p?i:null}function _(e,s){const t=(0,r.b)(e,s);return t?{asset:e,assetType:t}:null}async function R(e,s,t){return C(e.map((e=>B(e,t))),s,t)}async function C(e,s,t){const o=p(l.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),r=await X(e,s,{...t,onProgress:o.makeOnProgress("prepareAssetItems")});(0,n.D)(t);const a=r.map((({item:e})=>e)),{uploadResults:i}=await q(a,s,{...t,onProgress:o.makeOnProgress("uploadAssetItems")});return(0,n.D)(t),e.map(((e,t)=>Y(r[t],i[t],s)))}async function B(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return(0,n.D)(s),{blob:r,assetName:t.assetName,assetType:o}}async function O(e,s,t){const{blob:o,assetType:r,assetName:i}=e;let c=null;try{const e=await x({data:o,name:i},s.url,t);(0,n.D)(t),c={assetType:r,assetUploadId:e.itemID}}catch(u){(0,n.G)(u),V().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!c){const e=await(0,n.eV)(o);if((0,n.D)(t),!e.isBase64)throw new a.u;c={assetType:r,assetData:e.data}}if(!c)throw new a.p;return{item:c,assetName:i}}function X(e,s,t){const o=p(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,r)=>{const a=O(await e,s,{...t,onProgress:o.makeOnProgress(r)});return(0,n.D)(t),a})))}async function q(e,s,t){const o=f(t?.onProgress);try{const o=await(0,n.U)((0,n.Z)(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,n.D)(t),o.data.uploadResults.length!==e.length)throw new a.a(e.length,o.data.uploadResults.length);return o.data}finally{o.remove()}}function Y(e,s,t){const{success:n}=s;if(!n){const{error:t}=s;throw new a.d(e.assetName,t)}const{assetHash:o}=s,{assetName:i,item:{assetType:u}}=e,{infoFor3D:{supportedFormats:l}}=t,p=(0,c.s)(u,l);if(!p)throw new a.c(u);return new r.a(i,p,[new r.i(`${t.parsedUrl.path}/assets/${o}`,o)])}async function L(e,s,t){const o=e.map((({assetName:e,parts:s})=>({assetName:e,assetHash:s[0].partHash})));let r;try{const e=(0,n.Z)(s.parsedUrl.path,"convert3D"),a=s.capabilities?.operations.supportsAsyncConvert3D;r=(await(a?J:H)(e,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:a},responseType:"json",timeout:0})).data}catch{throw new a.l}return z(s,r)}function z(e,s){const t={source:s.assets.map((s=>{const t=(0,c.u)(s.contentType,e.infoFor3D.supportedFormats);if(!t)throw new a.c(t);return new r.a(s.assetName,s.contentType,[new r.i(s.assetURL,s.assetHash)])})),origin:void 0,transform:void 0};if((0,n.a$)("enable-feature:georeferenced-uploads")&&s.transform){if(t.transform=(0,u.i)(s.transform),s.spatialReference){const e=n.B.fromJSON(s.spatialReference);t.origin=(0,u.n)(s.transform,e)}}else t.transform=(0,a.t)(e.spatialReference);return t}function H(e,s){return(0,n.U)(e,s)}async function J(e,s){const t=(await(0,n.U)(e,s)).data.statusUrl;for(;;){const e=(await(0,n.U)(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,n.U)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,n.eX)(W)}}function G(e){return!!e.infoFor3D&&!!e.url}function K({infoFor3D:e}){const s=(0,c.a)(e);if(!s)throw new a.b;return s}function V(){return n.n.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const W=(0,n.cP)(1e3)}}]);
//# sourceMappingURL=6903.a459e99b.js.map