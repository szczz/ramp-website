"use strict";(self["webpackChunkramp_website"]=self["webpackChunkramp_website"]||[]).push([[7918],{97918:function(e,t,a){a.r(t),a.d(t,{default:function(){return g}});var i,n=a(98503),s=a(88012),o=a(28252),r=a(45121),l=a(75934),h=a(95134),d=a(50027),u=a(20784),c=a(83424),y=a(50850);(function(e){e.MULTIPLIER="multiplier",e.ABSOLUTE="absoluteValue"})(i||(i={}));let p=class extends((0,u.b)((0,d.l)((0,c.t)((0,s.S)(o.f))))){constructor(e){if(super(e),this.dataPreloadedInLocalCache=!1,this.defaultLinkChartConfig=null,this._currentLinkChartConfig={layoutMode:"RADIAL_TREE"},this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new(n.V.ofType(h.u)),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map,this.linkChartExtent=new n.au({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7}),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="LinkChartLayer",this.sublayerIdsCache=new Map,this.tables=new(n.V.ofType(h.u)),this.type="link-chart",this.chronologicalAuxiliaryGraphics=null,this._originalInclusionList=e?.inclusionModeDefinition,e?.dataPreloadedInLocalCache&&!e?.inclusionModeDefinition)throw new n.s("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");this.addHandles((0,n.aE)((()=>this.layers.concat(this.tables)),((e,t)=>this._handleSublayersChange(e,t)),n.az))}normalizeCtorArgs(e){if(!e)return{};const{url:t,title:a,dataPreloadedInLocalCache:i,defaultLinkChartConfig:n}=e;return{url:t,title:a,dataPreloadedInLocalCache:i,defaultLinkChartConfig:n}}_initializeLayerProperties(e){if(!this.title&&this.url){const e=this.url.split("/");this.title=e[e.length-2]}const t=new Set;let a=[],i=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new n.s("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.inclusionModeDefinition?.generateAllSublayers?(a=e.knowledgeGraph.dataModel.entityTypes??[],i=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach(((s,o)=>{const r=this._graphTypeLookup.get(o);if(!r)return n.n.getLogger(this).warn(`A named type, ${o}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(o);"relationship"===r.type?t.has(o)||(t.add(o),i.push(r)):"entity"===r.type?t.has(o)||(t.add(o),a.push(r)):(n.n.getLogger(this).warn(`A named type, ${o}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(o))})):(a=e.knowledgeGraph.dataModel.entityTypes??[],i=e.knowledgeGraph.dataModel.relationshipTypes??[]);const s=new h.E({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=a,this.memberRelationshipTypes=i,this.dataManager=s}load(e){const t=async()=>{const e=[],t=[];this.loadLayerAssumingLocalCache(),await(0,h.c)(this),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach((e=>{e.useAllData=!1})),await this._initializeDiagram(),this.layers.forEach((a=>{t.push(a.refreshCachedQueryEngine()),e.push(new Promise((e=>{a.on("layerview-create",(()=>{e(null)}))})))})),this.tables.forEach((e=>{t.push(e.refreshCachedQueryEngine())})),await Promise.all(t)};return this.addResolvingPromise(new Promise((a=>{(0,y.F)(this.url).then((async i=>{if(this._initializeLayerProperties({knowledgeGraph:i,inclusionModeDefinition:this._originalInclusionList}),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},this.dataManager.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})})),this.dataManager.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})}))),this.dataPreloadedInLocalCache){const e=h.i.getInstance();for(const[t,a]of this.dataManager.inclusionModeDefinition?.namedTypeDefinitions??[])for(const i of a.members?.values()??[]){const a=e.readFromStoreById(`${t}__${i.id}`);a&&(0,n.ao)(this.dataManager.sublayerCaches,t,(()=>new Map)).set(i.id,a)}await t()}else{const a="GEOGRAPHIC"===this.defaultLinkChartConfig?.layoutMode;this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,a,!0).then((async()=>{(0,n.D)(e),await t()})))}a(null)}))}))),Promise.resolve(this)}set inclusionModeDefinition(e){"loaded"!==this.loadStatus&&"failed"!==this.loadStatus?this._set("inclusionModeDefinition",e):n.n.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}async addRecords(e,t){let a=[];t?.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(a=await(0,h.A)(e,this.dataManager.knowledgeGraph));const i=e.concat(a).filter((e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)));await this._handleNewRecords(i)}async removeRecords(e,{cascadeRemoveRelationships:t=!0,recalculateLayout:a=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1}){let i=[];for(const s of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(s.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(s.typeName)?.members?.has(s.id)&&i.push(s);if(t){const e=new Set,t=[];for(const a of i)if(this.dataManager.nodeConnectionsLookup.has(a.id))for(const t of this.dataManager.nodeConnectionsLookup.get(a.id))e.add(t);for(const a of e)if(this.dataManager.memberIdTypeLookup.has(a))for(const e of this.dataManager.memberIdTypeLookup.get(a))this.dataManager.relationshipTypeNames.has(e)&&t.push({id:a,typeName:e});i=i.concat(t)}this.dataManager.removeFromLayer(i);for(const s of i)this.sublayerIdsCache.get(s.typeName)?.delete(s.id),this.dataManager.relationshipTypeNames.has(s.typeName)?this.relationshipLinkChartDiagramLookup.delete(s.id):this.entityLinkChartDiagramLookup.delete(s.id);a&&await this._calculateLayoutWithSublayerTimeInfo(this._currentLinkChartConfig.layoutMode,this._currentLinkChartConfig.layoutOptions);const n=[];return this.layers.forEach((e=>{n.push(e.refreshCachedQueryEngine())})),await Promise.all(n),this._refreshNamedTypes(),i}async expand(e,t){const a=await this.dataManager.getConnectedRecordIds(e,t),i=a.filter((e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)));return await this._handleNewRecords(a),{records:i}}loadLayerAssumingLocalCache(){const e=[...this.memberRelationshipTypes,...this.memberEntityTypes];this.originIdOf("layers")===n.bm.DEFAULTS?this._createSublayers(e,this.layers,(e=>!!e.geometryType)):this._updateSublayers(e,this.layers),this.originIdOf("tables")===n.bm.DEFAULTS?this._createSublayers(e,this.tables,(e=>!e.geometryType)):this._updateSublayers(e,this.tables),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((e,t)=>{const a=(0,n.ao)(this.sublayerIdsCache,t,(()=>new Set));e.members?.forEach((({id:e,linkChartLocation:i})=>{if(a.add(e),i){const a=i instanceof l.s?i:(0,r.o)(i);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(e,a):this.entityLinkChartDiagramLookup.set(e,a)}}))}))}async calculateLinkChartLayout(e="RADIAL_TREE",t){const a=[],i=[],s=[];this.dataManager.sublayerCaches.forEach(((e,t)=>{this.dataManager.entityTypeNames.has(t)?e.forEach((e=>{a.push({typeName:t,feature:e})})):this.dataManager.relationshipTypeNames.has(t)&&e.forEach((e=>{i.push({typeName:t,feature:e})}))})),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map;const o=new Map,l=new Map,d=new Map,u=new Map,c=new Uint8Array(a.length),y=new Float64Array(a.length),p=new Float64Array(a.length),g=new Float64Array(a.length),f=new Float64Array(a.length),m=new Uint32Array(i.length),L=new Uint32Array(i.length),C=new Float64Array(i.length),b=new Float64Array(i.length),k=[],M="FORCE_DIRECTED",w=new n.au({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7});let T,E="FORCE_DIRECTED",N=0,I=0;const D=h.b.apply;switch(E="GEOGRAPHIC"===e?M:e,E){case"FORCE_DIRECTED":T=h.f.apply;break;case"COMMUNITY":T=h.a.apply;break;case"HIERARCHICAL":T=h.h.apply;break;case"RADIAL_TREE":T=h.m.apply;break;case"SMART_TREE":T=h.L.apply;break;default:T=h.v.apply}let x=!1;a.forEach((({typeName:a,feature:i})=>{if("CHRONOLOGICAL_SINGLE"!==e&&"CHRONOLOGICAL_MULTIPLE"!==e&&t?.lockedNodeLocations?.has(i.attributes[h.d])){"GEOGRAPHIC"===e&&this.dataManager.geographicLookup.has(a)?c[N]=h.s.IsGeographic:c[N]=h.s.None;const n=t.lockedNodeLocations.get(i.attributes[h.d]);y[N]=n.x,p[N]=n.y}else if("GEOGRAPHIC"===e&&this.dataManager.geographicLookup.has(a)){c[N]=h.s.IsGeographic;let e=null;const t=i.attributes[this.dataManager.geographicLookup.get(a).name];switch(this.dataManager.geographicLookup.get(a)?.geometryType){case"esriGeometryPoint":y[N]=t?.x,p[N]=t?.y;break;case"esriGeometryPolygon":e=t?.centroid,null!=e?.x&&null!=e?.y?(y[N]=e.x,p[N]=e.y):c[N]=h.s.IsMovable;break;case"esriGeometryPolyline":case"esriGeometryMultipoint":e=t?.extent?.center,null!=e?.x&&null!=e?.y?(y[N]=e.x,p[N]=e.y):c[N]=h.s.IsMovable;break;default:c[N]=h.s.IsMovable}(null==y[N]||null==p[N]||Number.isNaN(y[N])||Number.isNaN(p[N]))&&(c[N]=h.s.IsMovable,y[N]=0,p[N]=0)}else if("CHRONOLOGICAL_SINGLE"===e||"CHRONOLOGICAL_MULTIPLE"===e){!x&&t?.lockedNodeLocations?.has(i.attributes[h.d])&&(x=!0);const e=t?.timeInfoByTypeName?.get(a),n=e?.startField,s=n&&e?.startField?i.attributes[n]:null;g[N]=s?new Date(s).getTime():NaN;const o=e?.endField,r=o&&e?.endField?i.attributes[o]:null;f[N]=r?new Date(r).getTime():NaN,y[N]=0,p[N]=0,c[N]=h.s.IsMovable}else c[N]=h.s.IsMovable,y[N]=0,p[N]=0;u.set(i.attributes[h.d],N),k[N]={feature:i,typeName:a},N++})),x&&n.n.getLogger(this).warn("Locked node locations are not supported for chronological layout at this time.  Requested node locations were ignored");let _=!1;const R=new Map;i.forEach((a=>{const i=a.feature.attributes[h.t],n=a.feature.attributes[h.r],o=u.get(i),r=u.get(n),l=t?.timeInfoByTypeName?.get(a.typeName),d=t?.timeInfoByTypeName?l?.startField:null,c=d?a.feature.attributes[d]:null,y=l?.endField,p=y?a.feature.attributes[y]:null;if(void 0!==o&&void 0!==r){let t=i+"-"+n;"CHRONOLOGICAL_SINGLE"!==e&&"CHRONOLOGICAL_MULTIPLE"!==e||(t=t+"-"+c+"-"+p);const l=R.get(t);l?.has(a.typeName)||(m[I]=o,L[I]=r,"CHRONOLOGICAL_SINGLE"!==e&&"CHRONOLOGICAL_MULTIPLE"!==e||(C[I]=c?new Date(c).getTime():NaN,b[I]=p?new Date(p).getTime():NaN),void 0===l?R.set(t,new Map([[a.typeName,I]])):l.set(a.typeName,I),I++),s.push(a)}else _=!0,this.relationshipLinkChartDiagramLookup.set(i,null)})),_&&n.n.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null");const A=this._validateLayoutSettings(e,t),O=this._convertLayoutSettingsToCalculationSettings(A);await(0,h.e)();let v=!1,S=null;if("CHRONOLOGICAL_SINGLE"===e||"CHRONOLOGICAL_MULTIPLE"===e){let a;({success:v,links:S,graphics:a}=D(c,y,p,g,f,m.subarray(0,I),L.subarray(0,I),C.subarray(0,I),b.subarray(0,I),"CHRONOLOGICAL_MULTIPLE"===e,t?.chronologicalLayoutSettings??{})),v&&(this.chronologicalAuxiliaryGraphics=a)}else({success:v,links:S}=T(c,y,p,m.subarray(0,I),L.subarray(0,I),O.computationBudgetTime,O.idealEdgeLengthMultiplier,O.repulsionRadiusMultiplier));if(!v)throw new n.s("knowledge-graph:layout-failed","Attempting to arrange the records in the specified layout failed");for(let U=0;U<k.length;U++){if(p[U]>84.9999?p[U]=84.9999:p[U]<-84.9999&&(p[U]=-84.9999),y[U]>179.9999?y[U]=179.9999:y[U]<-179.9999&&(y[U]=-179.9999),k[U].feature.attributes[h.n]=new n.bv(y[U],p[U]),o.has(k[U].typeName))o.get(k[U].typeName)?.set(k[U].feature.attributes[h.d],k[U].feature);else{const e=new Map;e.set(k[U].feature.attributes[h.d],k[U].feature),o.set(k[U].typeName,e)}d.set(k[U].feature.attributes[h.d],k[U].feature);const e=(0,r.o)(k[U].feature.attributes[h.n]);this.entityLinkChartDiagramLookup.set(k[U].feature.attributes[h.d],k[U].feature.attributes[h.n]?e:null),k[U].feature.attributes[h.n].x<w.xmin&&(w.xmin=k[U].feature.attributes[h.n].x),k[U].feature.attributes[h.n].x>w.xmax&&(w.xmax=k[U].feature.attributes[h.n].x),k[U].feature.attributes[h.n].y<w.ymin&&(w.ymin=k[U].feature.attributes[h.n].y),k[U].feature.attributes[h.n].y>w.ymax&&(w.ymax=k[U].feature.attributes[h.n].y)}if(this.linkChartExtent.xmin=w.xmin,this.linkChartExtent.xmax=w.xmax,this.linkChartExtent.ymin=w.ymin,this.linkChartExtent.ymax=w.ymax,!S)throw new n.s("knowledge-graph:layout-failed","Attempting to retrieve link geometry from diagram engine failed");const G=new Map,P=new Map,H=new Map,F=new Set;for(let U=0;U<s.length;U++){const a=[],i=s[U],o=i.feature.attributes[h.t],c=i.feature.attributes[h.r];let y=o+"-"+c;if("CHRONOLOGICAL_SINGLE"===e||"CHRONOLOGICAL_MULTIPLE"===e){const e=t?.timeInfoByTypeName?.get(i.typeName),a=t?.timeInfoByTypeName?e?.startField:null,n=a?i.feature.attributes[a]:null,s=e?.endField;y+="-"+n+"-"+(s?i.feature.attributes[s]:null)}const p=R.get(y).get(i.typeName),g=0===p?0:S?.vertexEndIndex[p-1];if(!F.has(p)){if(F.add(p),S.types[p]===h.o.Recursive){const e=[S.vertices[2*g],S.vertices[2*g+1]],t=[S.vertices[2*(g+1)],S.vertices[2*(g+1)+1]],i=[.5*(e[0]+t[0]),.5*(e[1]+t[1])],n=[i[0]-e[0],i[1]-e[1]],s=[i[0]+n[1],i[1]-n[0]],o=[i[0]-n[1],i[1]+n[0]];a.push(e),a.push(s),a.push(t),a.push(o),a.push(e)}else{if(S.types[p]!==h.o.Regular){n.n.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");continue}for(let e=g;e<S.vertexEndIndex[p];e++)a.push([S.vertices[2*e],S.vertices[2*e+1]])}if("CHRONOLOGICAL_SINGLE"!==e&&"CHRONOLOGICAL_MULTIPLE"!==e){const e=k[u.get(o)]?.feature.attributes[h.n],t=k[u.get(c)]?.feature.attributes[h.n];a[0][0]===e.x&&a[0][1]===e.y||(a[0]=[e.x,e.y]),a[a.length-1][0]===t.x&&a[a.length-1][1]===t.y||(a[a.length-1]=[t.x,t.y])}for(let e=1;e<a.length-1;e++)a[e][1]>85.5?a[e][1]=85.5:a[e][1]<-85.5&&(a[e][1]=-85.5),a[e][0]>179.9999?a[e][0]=179.9999:a[e][0]<-179.9999&&(a[e][0]=-179.9999);G.has(y)?G.get(y).push(a):G.set(y,[a])}const f=G.get(y);P.has(y)||(P.set(y,new Map),H.set(y,new Map));const m=P.get(y),L=H.get(y);m.has(i.typeName)||(m.set(i.typeName,f.shift()),L.set(i.typeName,0));const C=m.get(i.typeName);L.set(i.typeName,L.get(i.typeName)+1);const b=new n.aT({paths:[C]});if(i.feature.attributes[h.n]=b,l.has(i.typeName))l.get(i.typeName)?.set(i.feature.attributes[h.d],i.feature);else{const e=new Map;e.set(i.feature.attributes[h.d],i.feature),l.set(i.typeName,e)}d.set(i.feature.attributes[h.d],i.feature);const M=(0,r.o)(i.feature.attributes[h.n]);this.relationshipLinkChartDiagramLookup.set(i.feature.attributes[h.d],i.feature.attributes[h.n]?M:null)}for(const n of s)n.feature.attributes[h.g]=H.get(n.feature.attributes[h.t]+"-"+n.feature.attributes[h.r])?.get(n.typeName)??null;return this._currentLinkChartConfig={layoutMode:e,layoutOptions:A},{nodes:o,links:l,idMap:d}}async applyNewLinkChartLayout(e="RADIAL_TREE",t){const a=[];await this._calculateLayoutWithSublayerTimeInfo(e,t),this.layers.forEach((e=>{a.push(e.refreshCachedQueryEngine())})),await Promise.all(a),this._refreshNamedTypes()}getCurrentNodeLocations(){const e=new Map;return this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((t=>{t?.members?.forEach((t=>{const a=t.linkChartLocation;let i;const s=t.id;a&&(i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]},e.set(s,new n.bv({x:i.x,y:i.y})))}))})),e}async synchronizeInclusionListWithCache(){return new Promise((e=>{this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{if(e.useAllData=!1,e.members&&e.members.size>0){if(!this.dataManager.sublayerCaches.get(t))return;const a=new Set(Array.from(this.dataManager.sublayerCaches.get(t).keys()));Array.from(e.members.keys()).filter((e=>!a.has(e))).forEach((t=>{e.members?.delete(t)}))}})),e()}))}async refreshLinkChartCache(e){await this.dataManager.refreshCacheContent(e);const t=[];this.layers.forEach((e=>{t.push(e.refreshCachedQueryEngine())})),await Promise.all(t),this._refreshNamedTypes()}async connectBetweenEntities(e){let t=[];for(const i of this.dataManager.relationshipTypeNames){const e=this.sublayerIdsCache.get(i);e&&(t=t.concat(Array.from(e.keys())))}const a=await this.dataManager.getRelationshipsBetweenNodes(e,t);return await this._handleNewRecords(a),{records:a}}async connectFromEntities(e){let t=[];for(const n of this.dataManager.relationshipTypeNames){const e=this.sublayerIdsCache.get(n);e&&(t=t.concat(Array.from(e.keys())))}let a=[];for(const n of this.dataManager.entityTypeNames){const e=this.sublayerIdsCache.get(n);e&&(a=a.concat(Array.from(e)))}const i=await this.dataManager.getRelationshipsFromNodes(e,a,t);return await this._handleNewRecords(i),{records:i}}getCurrentLayout(){return this._currentLinkChartConfig.layoutMode}async _calculateLayoutWithSublayerTimeInfo(e="RADIAL_TREE",t){const a=new Map;this.layers.forEach((e=>{a.set(e.objectType.name,e.timeInfo)})),await this.calculateLinkChartLayout(e,{timeInfoByTypeName:a,...t})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t){const e=this._graphTypeLookup.get(i);if(e){const t=this._createSublayer(e);"entity"===e.type?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.set(i,new Map)}}await(0,h.c)(this,t),await this.dataManager.refreshCacheContent(e.map((e=>e.id)));const a=Object.assign({},this._currentLinkChartConfig.layoutOptions);a.lockedNodeLocations=new Map;for(const[i,s]of this.entityLinkChartDiagramLookup.entries())s&&a.lockedNodeLocations.set(i,new n.bv(s.coords[0],s.coords[1]));await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode,a)}_createSublayers(e,t,a){e.forEach((e=>{const i=this._createSublayer(e);a(i)&&t.push(i),this._updateSublayerCaches(e)}))}_updateSublayers(e,t){t.forEach((t=>{t.parentCompositeLayer=this;const a=e.find((e=>e.type===t.graphType&&e.name===t.graphTypeName));a&&(t.objectType=a,t.read({title:a.name},{origin:"service"}),this._updateSublayerCaches(a))}))}_updateSublayerCaches(e){const t=this.dataManager.sublayerCaches;t.has(e.name)||t.set(e.name,new Map)}async _initializeDiagram(){this.defaultLinkChartConfig?this.defaultLinkChartConfig.doNotRecalculateLayout?(this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((e,t)=>{e?.members?.forEach((e=>{const a=e.linkChartLocation;let i;const n=e.id;if(!a)return;i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]};const s=(0,r.o)(i);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(n,s):this.entityLinkChartDiagramLookup.set(n,s),this.linkChartExtent.xmin>i.x&&(this.linkChartExtent.xmin=i.x),this.linkChartExtent.xmax<i.x&&(this.linkChartExtent.xmax=i.x),this.linkChartExtent.ymin>i.y&&(this.linkChartExtent.ymin=i.y),this.linkChartExtent.ymax<i.y&&(this.linkChartExtent.ymax=i.y)}))})),this.memberRelationshipTypes.forEach((e=>{e.name&&this.dataManager.sublayerCaches.get(e.name)?.forEach((e=>{const t=this.relationshipLinkChartDiagramLookup.get(e.attributes[h.t]),a=this.relationshipLinkChartDiagramLookup.get(e.attributes[h.r]);if(t&&a){const i=(0,r.o)(new n.aT({paths:[[[t.coords[0],t.coords[1]],[a.coords[0],a.coords[1]]]]}));this.relationshipLinkChartDiagramLookup.set(e.attributes[h.d],i)}else this.relationshipLinkChartDiagramLookup.set(e.attributes[h.d],null)}))}))):await this._calculateLayoutWithSublayerTimeInfo(this.defaultLinkChartConfig.layoutMode,{lockedNodeLocations:this.getCurrentNodeLocations(),...this.defaultLinkChartConfig.layoutOptions||{}}):await this._calculateLayoutWithSublayerTimeInfo("RADIAL_TREE",{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}_validateLayoutSettings(e,t){const a=e=>"number"==typeof e&&!isNaN(e),s=e=>a(e)&&e>=1,o=e=>a(e)&&e>=1,r=e=>Object.values(i).includes(e),l=e=>a(e)&&e>=0,h={organicLayoutSettings:{},chronologicalLayoutSettings:{}};if(!new Set(["FORCE_DIRECTED","COMMUNITY","GEOGRAPHIC","CHRONOLOGICAL_MULTIPLE","CHRONOLOGICAL_SINGLE"]).has(e)||!t)return h;t.organicLayoutSettings??={};const{computationBudgetTime:d,repulsionRadiusMultiplier:u,idealEdgeLength:c,idealEdgeLengthType:y}=t.organicLayoutSettings;if(o(d)?h.organicLayoutSettings.computationBudgetTime=d:void 0!==d&&n.n.getLogger(this).warn("Invalid layout computationBudgetTime setting, will revert to default setting"),s(u)?h.organicLayoutSettings.repulsionRadiusMultiplier=u:void 0!==u&&n.n.getLogger(this).warn("Invalid layout repulsionRadiusMultiplier setting, will revert to default setting"),"GEOGRAPHIC"===e&&(void 0!==c||void 0!==y)&&(r(y)?h.organicLayoutSettings.idealEdgeLengthType=y:void 0!==y&&n.n.getLogger(this).warn('Invalid layout idealEdgeLengthType setting, will revert to "multiplier" setting'),l(c)?h.organicLayoutSettings.idealEdgeLength=c:void 0!==c&&n.n.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting")),("CHRONOLOGICAL_MULTIPLE"===e||"CHRONOLOGICAL_SINGLE"===e)&&t.chronologicalLayoutSettings){const e=t.chronologicalLayoutSettings;e.durationLineWidth&&e.durationLineWidth<0&&n.n.getLogger(this).warn("Invalid layout durationLineWidth setting, will revert to default setting")}return h}_convertLayoutSettingsToCalculationSettings(e){e.organicLayoutSettings??={};let t=e.organicLayoutSettings.idealEdgeLength;return e.organicLayoutSettings.idealEdgeLengthType===i.ABSOLUTE&&(void 0===t?t=-1:t*=-1),{computationBudgetTime:e.organicLayoutSettings.computationBudgetTime,repulsionRadiusMultiplier:e.organicLayoutSettings.repulsionRadiusMultiplier,idealEdgeLengthMultiplier:t}}_createSublayer(e){return new h.u({objectType:e,parentCompositeLayer:this,graphType:e.type})}_handleSublayersChange(e,t){t&&(t.forEach((e=>{e.parent=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((e=>{e.parent=this})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this})),e.on("after-remove",(({item:e})=>{e.parent=null}))],"sublayers-owner"))}};(0,n.k)([(0,n.o)()],p.prototype,"dataPreloadedInLocalCache",void 0),(0,n.k)([(0,n.o)()],p.prototype,"defaultLinkChartConfig",void 0),(0,n.k)([(0,n.o)()],p.prototype,"dataManager",void 0),(0,n.k)([(0,n.o)()],p.prototype,"inclusionModeDefinition",null),(0,n.k)([(0,n.o)()],p.prototype,"knowledgeGraph",void 0),(0,n.k)([(0,n.o)({type:n.V.ofType(h.u),json:{write:{ignoreOrigin:!0}}})],p.prototype,"layers",void 0),(0,n.k)([(0,n.o)()],p.prototype,"entityLinkChartDiagramLookup",void 0),(0,n.k)([(0,n.o)()],p.prototype,"relationshipLinkChartDiagramLookup",void 0),(0,n.k)([(0,n.o)()],p.prototype,"linkChartExtent",void 0),(0,n.k)([(0,n.o)()],p.prototype,"memberEntityTypes",void 0),(0,n.k)([(0,n.o)()],p.prototype,"memberRelationshipTypes",void 0),(0,n.k)([(0,n.o)({type:["LinkChartLayer"]})],p.prototype,"operationalLayerType",void 0),(0,n.k)([(0,n.o)()],p.prototype,"sublayerIdsCache",void 0),(0,n.k)([(0,n.o)({type:n.V.ofType(h.u),json:{write:{ignoreOrigin:!0}}})],p.prototype,"tables",void 0),(0,n.k)([(0,n.o)({json:{read:!1}})],p.prototype,"type",void 0),(0,n.k)([(0,n.o)({json:{read:!1}})],p.prototype,"chronologicalAuxiliaryGraphics",void 0),p=(0,n.k)([(0,n.A)("esri.layers.LinkChartLayer")],p);const g=p}}]);
//# sourceMappingURL=7918.add8372f.js.map